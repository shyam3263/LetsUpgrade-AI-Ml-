{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-14T03:56:45.078699Z",
     "start_time": "2020-07-14T03:56:45.070696Z"
    }
   },
   "source": [
    "## Question_3 : Create Your own Jupyter notebook for Sets "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> A set is a collection which is `unordered` and `unindexed`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-14T04:15:46.135602Z",
     "start_time": "2020-07-14T04:15:46.123598Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Computer', 'Mobile', 'laptop'}\n"
     ]
    }
   ],
   "source": [
    "ex_set = {\"laptop\",'Mobile','Computer'}\n",
    "print(ex_set)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Access Items\n",
    "*We can't access items in set by referring index, sets are unordered the items has no index.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-14T04:15:46.735733Z",
     "start_time": "2020-07-14T04:15:46.723733Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Computer\n",
      "Mobile\n",
      "laptop\n"
     ]
    }
   ],
   "source": [
    "# We can loop througth the set items using for loop\n",
    "for item in ex_set:\n",
    "    print(item)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-14T04:15:47.103826Z",
     "start_time": "2020-07-14T04:15:47.095822Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check if ipad present in set\n",
    "\n",
    "'ipad' in ex_set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-14T04:08:50.978569Z",
     "start_time": "2020-07-14T04:08:50.966567Z"
    }
   },
   "source": [
    "### Change Items\n",
    "\n",
    "> Once a set is created, you cannot change its items, but you can `add new items`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-14T04:09:42.774593Z",
     "start_time": "2020-07-14T04:09:42.758589Z"
    }
   },
   "source": [
    "### Add items \n",
    "\n",
    ">To add one item to a set use the `add()` method.\n",
    "\n",
    ">To add more than one item to a set use the `update()` method.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-14T04:15:48.471989Z",
     "start_time": "2020-07-14T04:15:48.459983Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Computer', 'Mobile', 'ipad', 'laptop'}"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ex_set.add(\"ipad\")\n",
    "ex_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-14T04:15:49.208112Z",
     "start_time": "2020-07-14T04:15:49.192103Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Computer', 'HDM1', 'HeadPhones', 'Mobile', 'ipad', 'laptop'}"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ex_set.update([\"HeadPhones\",'HDM1'])\n",
    "\n",
    "ex_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-14T04:15:49.972257Z",
     "start_time": "2020-07-14T04:15:49.964254Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(ex_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-14T04:15:50.636409Z",
     "start_time": "2020-07-14T04:15:50.624407Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Computer', 'HeadPhones', 'Mobile', 'ipad', 'laptop'}"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Remove Item\n",
    "\n",
    "\n",
    "ex_set.remove(\"HDM1\")\n",
    "\n",
    "ex_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-14T04:15:51.320549Z",
     "start_time": "2020-07-14T04:15:51.304550Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'HeadPhones'"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove the last item by using the pop() method:\n",
    "\n",
    "ex_set.pop()\n",
    "\n",
    "# Note: Sets are unordered, so when using the pop() method, \n",
    "# you will not know which item that gets removed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-14T04:16:14.267550Z",
     "start_time": "2020-07-14T04:16:14.259537Z"
    }
   },
   "outputs": [],
   "source": [
    "ex_set.clear()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-14T04:16:19.552321Z",
     "start_time": "2020-07-14T04:16:19.536315Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "set()"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ex_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-14T04:18:22.663409Z",
     "start_time": "2020-07-14T04:18:22.643403Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e'}"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set1 = {1,2,3,4,5}\n",
    "\n",
    "set2 = {'a','b','c','d','e'}\n",
    "\n",
    "s = set1.union(set2)\n",
    "\n",
    "s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-14T04:19:00.910057Z",
     "start_time": "2020-07-14T04:19:00.902045Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e'}"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set1.update(set2)\n",
    "set1"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
